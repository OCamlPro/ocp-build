(**************************************************************************)
(*                                                                        *)
(*                              OCamlPro TypeRex                          *)
(*                                                                        *)
(*   Copyright OCamlPro 2011-2016. All rights reserved.                   *)
(*   This file is distributed under the terms of the LGPL v2.1 with       *)
(*   the special exception on linking described in the file LICENSE.      *)
(*      (GNU Lesser General Public Licence version 2.1)                   *)
(*                                                                        *)
(*     Contact: <typerex@ocamlpro.com> (http://www.ocamlpro.com/)         *)
(*                                                                        *)
(*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       *)
(*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES       *)
(*  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND              *)
(*  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS   *)
(*  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN    *)
(*  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN     *)
(*  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE      *)
(*  SOFTWARE.                                                             *)
(**************************************************************************)

String = module("String");

ocaml.version = autoconf.package_version;

function set_default(env, varname, default){
    try { return env[varname]; }
    catch("unknown-field", arg){ return default; }
}

generated = set_default(., "generated", false);
(* try { generated; } catch("unknown-variable", arg){ generated = false; } *)

ocaml = { pp_requires = [] } + ocaml;

(*
if(  String.mem("+ocp", ocaml_version) )
  begin
    ocaml.files = [];
    ocaml.requires = [];
    new_package( "ocplib-compat", "library", ocaml);
  end
else {
*)
  if( generated ) begin
        new_package("ocp-pp","program",{
            generated = true;
            files = [];
            requires = [] });
      end

  begin
    ocaml.files = [ "stringCompat.ml" ];
    ocaml.pp = [ "%{ocp-pp_FULL_DST_DIR}%/ocp-pp.byte" ];
    ocaml.requires = [ "ocp-pp" ];
    ocaml.pp_requires += [ "ocp-pp:byte" ];
    ocaml.pp_deps = [ "%{ocp-pp_FULL_DST_DIR}%/ocp-pp.byte" ];
    new_package( "ocplib-compat", "library", ocaml);
  end

  begin
      ocaml.is_toplevel = true;
      ocaml.requires = [ "ocplib-compat" ];
      new_package( "ocplib-compat-top", "program", ocaml);
  end
  (*
}
*)
