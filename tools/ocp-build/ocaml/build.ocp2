(**************************************************************************)
(*                                                                        *)
(*   Typerex Tools                                                        *)
(*                                                                        *)
(*   Copyright 2011-2017 OCamlPro SAS                                     *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU General Public License version 3 described in the file       *)
(*   LICENSE.                                                             *)
(*                                                                        *)
(**************************************************************************)

(*
This plugin defines the rules to build OCaml packages.
BuildOCamlRules.create is directly called from BuildMain, so it
is not yet an optional plugin, but it should at some point (TODO).
*)
begin
  ocaml.files = [
    "buildOCamlConfig.ml";
    "buildOCamlTypes.ml";
    "buildOCamlMisc.ml";
    "buildOCamlVariables.ml";
    "buildOCamlGlobals.ml";
    "buildOCamldep.ml";         (* Load dependencies from a file generated
                                     by ocamldep *)
    "buildOCamlSyntaxes.ml";    (* For preprocessing of OCaml files *)
    "buildOCamlInstall.ml";
    "buildOCamlDotReport.ml";
    "buildOCamlVerifyPackages.ml";
    "buildOCamlOCP2.ml";
    "buildOCamlRules.ml";       (* Initialisation of the build Engine *)
    "buildOCamlMeta.ml";
    "buildOCamlTest.ml";

    (*    "buildOCFGen.ml"; *)
    "buildOCamlAutogen.ml";           (* Generate .ocp from directory content *)
    "buildOCamlPlugin.ml";
  ];
  ocaml.requires = [ "ocp-build-lib"; "ocplib-ocamlfind" ];
  (* HOW TO SPECIFY THE META FILE:
  ocaml.META = {
    archive.byte.value = "graphics.cma";
    archive.-native.value = "graphics.cma";
    archive.byte.-toplevel.append = "graphics.cma";   
  };
*)
   OCaml.library("ocp-build-ocaml-plugin", ocaml);
 end

begin
  ocaml.files = [ "buildOasis.ml" ];
  ocaml.requires = [ "ocp-build-project" ];
  OCaml.library("ocp-build-oasis", ocaml);
end

(*
begin

  ocaml.files = [
    "buildObjectInspector.ml";    (* Functions to explore object files *)
  ];

  ocaml.requires = [ "ocp-build-misc" ];
  OCaml.library( "ocp-build-ocaml", ocaml);
end
*)
