(**************************************************************************)
(*                                                                        *)
(*   Typerex Tools                                                        *)
(*                                                                        *)
(*   Copyright 2011-2017 OCamlPro SAS                                     *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU General Public License version 3 described in the file       *)
(*   LICENSE.                                                             *)
(*                                                                        *)
(**************************************************************************)

if(ocaml_version = "4.01.0+ocp1" || ocaml_version = "4.02.1+ocp1"){
  ocaml.enabled = false;
}

begin
  ocaml.version = autoconf.package_version;
  ocaml.files = [];
  if( ocaml_version < "4.02" ){
    ocaml.files += packer( "Ocpp_version", [

      "compat/4.00.0/config.ml";
      "compat/4.00.0/terminfo.ml";
      "compat/4.00.0/misc.ml";
      "compat/4.00.0/warnings.ml";
      "compat/4.00.0/location.ml";
      "compat/4.00.0/syntaxerr.ml";
      "compat/4.00.0/longident.ml";

      "compat/4.00.0/ocpCompat.ml";
      "compat/4.00.0/parser.ml";
      "compat/4.00.0/lexer.mll", { pp = [] };
      "compat/4.00.0/compat.ml";
    ]);
  } else {
    if( ocaml_version < "4.02.2" ) {
      ocaml.files += [ "compat/4.02.0/ocpp_version.ml" ];
    } else {
      if( ocaml_version < "4.03" ) {
        ocaml.files += [ "compat/4.02.2/ocpp_version.ml" ];
      } else {
        if( ocaml_version < "4.04" ){
          ocaml.files += [ "compat/4.03.0/ocpp_version.ml" ];
        } else {
          ocaml.files += [ "compat/4.04.0/ocpp_version.ml" ];
        }
      }
     }
     ocaml.requires = [  "compiler-libs.common" ];
  }

  ocaml.files += [
    "versioning.ml";
    "ocpp_parser.mly", { pp = [] };
    "ocpp_types.ml";
    "ocpp.ml";
    "main.ml";
  ];

  OCaml.program( "ocp-pp", ocaml);
end
